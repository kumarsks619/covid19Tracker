{"version":3,"sources":["components/Cards/Cards.module.css","img/covid19.png","components/Cards/Cards.js","api/api.js","components/Chart/Chart.js","components/CountryPicker/CountryPicker.js","App.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","undefined","className","styles","container","Grid","spacing","justify","item","component","Card","xm","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableURL","axios","get","console","log","fetchDailyData","reqData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","fetchAPI","useEffect","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","title","display","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","index","key","App","state","fetchedData","setState","this","src","require","image","alt","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8aa0367c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__2bePc\",\"card\":\"Cards_card__1yol-\",\"infected\":\"Cards_infected__sJ5We\",\"recovered\":\"Cards_recovered__3hsrG\",\"deaths\":\"Cards_deaths__3jcOi\"};","module.exports = __webpack_public_path__ + \"static/media/covid19.d7265326.png\";","import React from 'react'\r\nimport styles from './Cards.module.css'\r\nimport { Card, CardContent, Typography, Grid} from '@material-ui/core'\r\nimport CountUp from 'react-countup'\r\nimport cx from 'classnames'\r\n\r\nfunction Cards({data: {confirmed, recovered, deaths, lastUpdate}}) {\r\n    if(confirmed === undefined){\r\n        return 'Loading...'\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <Grid container spacing={3} justify=\"center\">\r\n                {/* Infected Card */}\r\n                <Grid item component={Card} xm={12} md={3} className={cx(styles.card, styles.infected)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\"  gutterBottom>Infected</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp\r\n                                start={0}\r\n                                end={confirmed.value}\r\n                                duration={2.0}\r\n                                separator=\",\"\r\n                            />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of active cases of COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                {/* Recovered Card */}\r\n                <Grid item component={Card} xm={12} md={3} className={cx(styles.card, styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\"  gutterBottom>Recovered</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp\r\n                                start={0}\r\n                                end={recovered.value}\r\n                                duration={2.0}\r\n                                separator=\",\"\r\n                            />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of recoveries from COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                {/* Deaths Card */}\r\n                <Grid item component={Card} xm={12} md={3} className={cx(styles.card, styles.deaths)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\"  gutterBottom>Deaths</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp\r\n                                start={0}\r\n                                end={deaths.value}\r\n                                duration={2.0}\r\n                                separator=\",\"\r\n                            />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of deaths from COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards\r\n","import axios from 'axios'\r\n\r\nconst url = 'https://covid19.mathdro.id/api'\r\n\r\n//function to fetch Cards data\r\nexport const fetchData = async(country) => {\r\n    let changeableURL = url\r\n    if(country){\r\n        changeableURL = `${url}/countries/${country}`\r\n    }\r\n\r\n    try {\r\n        //multi-level destructuring\r\n        const {data: {confirmed, recovered, deaths, lastUpdate}} = await axios.get(changeableURL)\r\n        //returning an ES6 object\r\n        return {confirmed, recovered, deaths, lastUpdate}\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\n\r\n//function to fetch Graph(Chart) data\r\nexport const fetchDailyData = async() => {\r\n    try {\r\n        const {data} = await axios.get(`${url}/daily`)\r\n        const reqData = (data.map((dailyData) => {\r\n            return(\r\n                {\r\n                    confirmed: dailyData.confirmed.total,\r\n                    deaths: dailyData.deaths.total,\r\n                    date: dailyData.reportDate\r\n                }\r\n            )\r\n        }))\r\n        return reqData\r\n    } catch (error) {\r\n        console.log(error) \r\n    }\r\n}\r\n\r\n\r\nexport const fetchCountries = async() => {\r\n    try {\r\n        const {data: {countries}} = await axios.get(`${url}/countries`)\r\n        const reqData = countries.map((country) => country.name)\r\n        return reqData\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}","import React, {useState, useEffect} from 'react'\r\nimport {fetchDailyData} from '../../api/api'\r\nimport {Line, Bar} from 'react-chartjs-2'\r\nimport styles from './Chart.module.css'\r\n\r\n\r\nfunction Chart({data: {confirmed, recovered, deaths}, country}) {\r\n    const [dailyData, setDailyData] = useState([])\r\n    \r\n    const fetchAPI = async() => {\r\n        const data = await fetchDailyData()\r\n        setDailyData(data)\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchAPI()\r\n    }, [])\r\n\r\n    const lineChart = (\r\n        dailyData.length ? (\r\n            <Line\r\n                data={{\r\n                    labels: dailyData.map(({date}) => date),\r\n                    datasets: [{\r\n                        data: dailyData.map(({confirmed}) => confirmed),\r\n                        label: 'Infected',\r\n                        borderColor: '#3333ff',\r\n                        fill: true \r\n                    }, {\r\n                        data: dailyData.map(({deaths}) => deaths),\r\n                        label: 'Deaths',\r\n                        borderColor: 'red',\r\n                        backgroundColor: 'rgba(255, 0, 0, 0.5)',\r\n                        fill: true\r\n                    }]\r\n                }}\r\n            />\r\n        ) : null\r\n    )\r\n\r\n\r\n    const barChart = (\r\n        confirmed ? (\r\n            <Bar\r\n                data={{\r\n                    labels: ['Infected', 'Recovered', 'Deaths'],\r\n                    datasets: [{\r\n                        label: 'People',\r\n                        backgroundColor: [\r\n                            'rgba(255, 0, 0, 0.5)',\r\n                            'rgba(0, 255, 0, 0.5)',\r\n                            'rgba(0, 0, 255, 0.5)'\r\n                        ],\r\n                        data: [confirmed.value, recovered.value, deaths.value]\r\n                    }]\r\n                }}\r\n                options={{\r\n                    legend: false,\r\n                    title: {display: true, text: `Current state in ${country}`}\r\n                }}\r\n            />\r\n        ) : null\r\n    )\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n           { country ? barChart : lineChart}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chart\r\n","import React, {useState, useEffect} from 'react'\r\nimport {FormControl, NativeSelect} from '@material-ui/core'\r\nimport styles from './CountryPicker.module.css'\r\nimport {fetchCountries} from '../../api/api'\r\n\r\nfunction CountryPicker({handleCountryChange}) {\r\n    const [fetchedCountries, setFetchedCountries] = useState([])\r\n\r\n    const fetchAPI = async() => {\r\n        const data = await fetchCountries()\r\n        setFetchedCountries(data)\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchAPI()\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <FormControl className={styles.formControl}>\r\n            <NativeSelect defaultValue='' onChange={(e) => handleCountryChange(e.target.value)}>\r\n                <option value=\"\">Global</option>\r\n                {\r\n                    fetchedCountries.map((country, index) => \r\n                        <option key={index} value={country}>{country}</option>\r\n                    )\r\n                }\r\n            </NativeSelect>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport default CountryPicker\r\n","import React, { Component } from 'react'\r\nimport {Cards, CountryPicker, Chart} from './components/imports'\r\nimport styles from './App.module.css'\r\nimport {fetchData} from './api/api'\r\n\r\nexport class App extends Component {\r\n    state = {\r\n        data: {},\r\n        country: ''\r\n    }\r\n\r\n    async componentDidMount(){\r\n        const fetchedData = await fetchData()\r\n        this.setState({data: fetchedData})\r\n    }\r\n\r\n    handleCountryChange = async(country) => {\r\n        const fetchedData = await fetchData(country)\r\n        this.setState({\r\n            data: fetchedData,\r\n            country: country\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const {data, country} = this.state\r\n        \r\n        return (\r\n            <div className={styles.container}>\r\n                <img src={require('./img/covid19.png')} className={styles.image} alt=\"COVID-19\r\n                \" />\r\n                <Cards data={data} />\r\n                <CountryPicker handleCountryChange={this.handleCountryChange} />\r\n                <Chart data={data} country={country} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__3zag7\",\"image\":\"App_image__13rsg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__hOg0i\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__JzgtN\"};"],"sourceRoot":""}